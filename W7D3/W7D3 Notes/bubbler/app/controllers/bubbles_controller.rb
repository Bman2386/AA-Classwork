class BubblesController < ApplicationController

  # macro that runs each method we pass in before any action is invoked (or before specific actions if we include only)
  before_action :ensure_logged_in, only: [:new, :create]

  def index
    @bubbles = Bubble.all.includes(:author)
    # render json: @bubbles
    # render "bubbles/test"
    render :index
  end

  def show
    @bubble = Bubble.find(params[:id]) 
    # render json: @bubble
    render :show
  end

  def new
    @bubble = Bubble.new
    render :new
  end

  def create
    @bubble = Bubble.new(bubble_params)
    @bubble.author = current_user # defined in / inherited from ApplicationController

    if @bubble.save
      redirect_to bubble_url(@bubble)
    else
      # the old way
      # render json: @bubble.errors.full_messages, status: 422

      # the new way using flash
      # `flash` and `flash.now`, like `session` and `cookies`, give us a hash-like object, :errors is just a semantically named key where we are storing the error messages generated by our model validations
      flash[:errors] = @bubble.errors.full_messages
      # render :new, status: 422 # same request-response, so have access to flash.now
      redirect_to new_bubble_url # new request, so need to use flash
    end
  end

  def edit
    @bubble = Bubble.find(params[:id])
    # we need @bubble for our edit view, in part, to be able to fill in the wildcard for our action
    render :edit
  end

  def update
    @bubble = Bubble.find(params[:id]) 
    if @bubble.update(bubble_params)
      redirect_to bubble_url(@bubble)
    else
      render json: @bubble.errors.full_messages, status: 422
    end
  end
  
  def destroy
    @bubble = Bubble.find(params[:id])

    @bubble.destroy

    redirect_to bubbles_url
  end


  # START COOKIE DEMO METHODS
  def set_cookie
    maybe_cookie = params[:my_cookie]

    if maybe_cookie
      # session method is built in, returns hash-like object of data stored in encrypted session cookie
      session[:my_cookie] = maybe_cookie 
      render plain: "I am setting your cookie: #{session[:my_cookie]}"
    else
      render plain: "You must provide a cookie"
    end
  end

  def get_cookie
    my_cookie = session[:my_cookie]
    if my_cookie
      render plain: "Here's your cookie: #{my_cookie}"
    else
      render plain: "You haven't set a cookie called :my_cookie yet"
    end
  end
  # END COOKIE DEMO METHODS

  private

  def bubble_params
    params
      .require(:bubble) # takes name of key in params as arg, requires everything to be nested under this key
      .permit(:body) # 1 or more symbols corresponding to fields we want user to be able to set (everything else is filtered out / ignored)
  end

end